{"version":3,"sources":["components/topNav.js","pages/index.js","pages/about.js","pages/three.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","list","width","fullList","TopNav","PageName","classes","React","useState","open","setOpen","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","onClick","Typography","variant","Button","Drawer","onClose","anchor","role","List","map","text","index","ListItem","button","key","component","Link","to","ListItemIcon","ListItemText","primary","Main","About","document","addEventListener","e","MyRotatingBox","props","myMesh","useRef","setHover","useFrame","clock","a","getElapsedTime","current","rotation","x","y","z","Math","sin","delay","cos","hidden","setVisible","texture","THREE","load","scale","ref","onPointerOver","onPointerOut","Html","style","transition","opacity","transform","distanceFactor","occlude","onOcclude","id","RotatingStill","Three","intensity","OrbitControls","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8a5fb9a8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\r\nimport MailIcon from \"@material-ui/icons/Mail\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  list: {\r\n    width: 250,\r\n  },\r\n  fullList: {\r\n    width: \"auto\",\r\n  },\r\n}));\r\n\r\nexport default function TopNav({ PageName }) {\r\n  const classes = useStyles();\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  function handleDrawerOpen() {\r\n    setOpen(true);\r\n  }\r\n\r\n  const list = (anchor) => (\r\n    <div className={classes.list} role=\"presentation\">\r\n      <List>\r\n        {[\"Home\", \"About\", \"THREE\"].map((text, index) => (\r\n          <ListItem button key={text} component={Link} to={text}>\r\n            <ListItemIcon>\r\n              {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\r\n            </ListItemIcon>\r\n            <ListItemText primary={text} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n      {/* <Divider />\r\n      <List>\r\n        {[\"All mail\", \"Trash\", \"Spam\"].map((text, index) => (\r\n          <ListItem button key={text}>\r\n            <ListItemIcon>\r\n              {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\r\n            </ListItemIcon>\r\n            <ListItemText primary={text} />\r\n          </ListItem>\r\n        ))}\r\n      </List> */}\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"menu\"\r\n            onClick={handleDrawerOpen}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            {PageName}\r\n          </Typography>\r\n          <Button color=\"inherit\">Login</Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer open={open} onClose={() => setOpen(false)} anchor=\"left\">\r\n        {list()}\r\n      </Drawer>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport TopNav from \"../components/topNav\";\r\n\r\nconst Main = () => {\r\n  return (\r\n    <div>\r\n      <TopNav PageName={\"Home\"} />\r\n      <h1>mainpage</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from \"react\";\r\nimport TopNav from \"../components/topNav\";\r\n\r\nconst About = () => {\r\n  return (\r\n    <div>\r\n      <TopNav PageName={\"AboutPage\"} />\r\n      <h1>About page</h1>\r\n      <body>aYOOOOOOOOOOOOOOOOOOOOOO</body>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import React, { useState } from 'react'\r\nimport TopNav from \"../components/topNav\";\r\nimport * as THREE from \"three\";\r\nimport { Canvas, useFrame } from \"@react-three/fiber\";\r\nimport { OrbitControls, Html } from '@react-three/drei'\r\nimport \"../css/three.css\"\r\n\r\ndocument.addEventListener('mousemove', onMouseUpdate, false);\r\n\r\nvar x = null;\r\nvar y = null;\r\n\r\nfunction onMouseUpdate(e) {\r\n  // x = (e.pageX / window.innerWidth) - 0.5;\r\n  // y = (e.pageY / window.innerHeight) - 0.5;\r\n\r\n  // console.log(x, y)\r\n}\r\n\r\nfunction MyRotatingBox(props) {\r\n  const myMesh = React.useRef();\r\n  const [hovered, setHover] = useState(false)\r\n\r\n\r\n\r\n  useFrame(({ clock }) => {\r\n    const a = clock.getElapsedTime();\r\n    // const b = 5\r\n\r\n    myMesh.current.rotation.x = a;\r\n    myMesh.current.rotation.y = a;\r\n    myMesh.current.rotation.z = a;\r\n\r\n    // myMesh.current.scale.x = 0.5 * Math.sin((clock.getElapsedTime() + props.delay) * b);\r\n    // myMesh.current.scale.y = 0.5 * Math.cos((clock.getElapsedTime() + props.delay) * b);\r\n    // myMesh.current.scale.z = 0.5 * Math.cos((clock.getElapsedTime() + props.delay) * b);\r\n\r\n    myMesh.current.position.x = (2 * Math.sin(clock.getElapsedTime() + props.delay)) + (x * 3);\r\n    myMesh.current.position.y = (2 * Math.cos(clock.getElapsedTime() + props.delay)) - (y * 3);\r\n    // console.log(props.delay)\r\n    // myMesh.current.position.set(myMesh.current.position.x-0.01,myMesh.current.position.y-0.01,0);\r\n  });\r\n\r\n  const [hidden, setVisible] = useState(false)\r\n  const texture = new THREE.TextureLoader().load(\"https://media-exp1.licdn.com/dms/image/C5603AQHZrMLlNEujLw/profile-displayphoto-shrink_200_200/0/1614307873790?e=1632960000&v=beta&t=9asZCAS91_OC4HxaOppbr0rLStkkUKSu-1bY_lpdtgE\");\r\n\r\n  return (\r\n    <mesh\r\n      scale={1}\r\n      ref={myMesh}\r\n      onPointerOver={(e) => setHover(true)}\r\n      onPointerOut={(e) => setHover(false)}>\r\n      <boxBufferGeometry />\r\n      <meshPhongMaterial map={texture} />\r\n      <Html\r\n        style={{\r\n          transition: 'all 0.2s',\r\n          opacity: hidden ? 0 : 1,\r\n          transform: `scale(${hidden ? 0.5 : 1})`\r\n        }}\r\n        distanceFactor={1.5}\r\n        position={[0, 0, 0.51]}\r\n        transform\r\n        occlude\r\n        onOcclude={setVisible}>\r\n        <h1 id='myName'>Shiyao Wang</h1>\r\n      </Html>\r\n\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction RotatingStill(props) {\r\n  // const myMesh = React.useRef();\r\n  const myMesh = React.useRef();\r\n  const [hovered, setHover] = useState(false)\r\n\r\n\r\n  useFrame(({ clock }) => {\r\n    const a = clock.getElapsedTime();\r\n    // const b = 5\r\n\r\n    myMesh.current.rotation.x = a;\r\n    myMesh.current.rotation.y = a;\r\n    myMesh.current.rotation.z = a;\r\n\r\n\r\n    // myMesh.current.scale.x = 0.5 * Math.sin((clock.getElapsedTime() + props.delay) * b);\r\n    // myMesh.current.scale.y = 0.5 * Math.cos((clock.getElapsedTime() + props.delay) * b);\r\n    // myMesh.current.scale.z = 0.5 * Math.cos((clock.getElapsedTime() + props.delay) * b);\r\n    // console.log(props.delay)\r\n    // myMesh.current.position.set(myMesh.current.position.x-0.01,myMesh.current.position.y-0.01,0);\r\n  });\r\n\r\n  // const [size, set] = useState(0.5)\r\n  const [hidden, setVisible] = useState(false)\r\n  const texture = new THREE.TextureLoader().load(\"https://media-exp1.licdn.com/dms/image/C5603AQHZrMLlNEujLw/profile-displayphoto-shrink_200_200/0/1614307873790?e=1632960000&v=beta&t=9asZCAS91_OC4HxaOppbr0rLStkkUKSu-1bY_lpdtgE\");\r\n  // const colorMap = useLoader(TextureLoader, \"/home/shiyao-wang/Documents/websites/anivision/anivision/src/pages/test.jpg\")\r\n\r\n  return (\r\n    <mesh\r\n      scale={1}\r\n      ref={myMesh}\r\n      onPointerOver={(e) => setHover(true)}\r\n      onPointerOut={(e) => setHover(false)}>\r\n      <sphereBufferGeometry />\r\n      <meshPhongMaterial map={texture} />\r\n      <Html\r\n        style={{\r\n          transition: 'all 0.2s',\r\n          opacity: hidden ? 0 : 1,\r\n          transform: `scale(${hidden ? 0.5 : 1})`\r\n        }}\r\n        distanceFactor={1.5}\r\n        position={[0, 0, 0.51]}\r\n        transform\r\n        occlude\r\n        onOcclude={setVisible}>\r\n        <h1 id=\"myName\">Shiyao Wang</h1>\r\n      </Html>\r\n\r\n    </mesh>\r\n  );\r\n}\r\n\r\nconst Three = () => {\r\n  return (\r\n    <div id=\"THREE_page_body\">\r\n      {/* <img src=\"https://media-exp1.licdn.com/dms/image/C5603AQHZrMLlNEujLw/profile-displayphoto-shrink_200_200/0/1614307873790?e=1632960000&v=beta&t=9asZCAS91_OC4HxaOppbr0rLStkkUKSu-1bY_lpdtgE\" /> */}\r\n      <TopNav PageName={\"three.js testing\"} />\r\n      <Canvas id=\"c\">\r\n        <pointLight position={[10, 10, 5]} />\r\n        <pointLight position={[-10, -10, -10]} />\r\n        <MyRotatingBox delay={0} />\r\n        <MyRotatingBox delay={1} />\r\n        <MyRotatingBox delay={2} />\r\n        <MyRotatingBox delay={3} />\r\n        <MyRotatingBox delay={4} />\r\n        <MyRotatingBox delay={5} />\r\n        <RotatingStill />\r\n        <ambientLight intensity={0.1} />\r\n        <directionalLight />\r\n        <OrbitControls />\r\n      </Canvas>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Three;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch\r\n} from \"react-router-dom\";\r\n\r\nimport Main from \"./pages/index\";\r\nimport About from \"./pages/about\";\r\nimport Three from \"./pages/three\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <h1>BRUH</h1>\r\n        <Switch>\r\n          <Route path=\"anivision/home\" component={Main} />\r\n          <Route path=\"anivision/about\" component={About} />\r\n          <Route path=\"anivision/three\" component={Three} />\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { Canvas } from \"react-three-fiber\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}